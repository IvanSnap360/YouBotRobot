cmake_minimum_required(VERSION 3.8)
project(omnibot_platform_control)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(control_msgs REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclcpp_action REQUIRED)
find_package(std_msgs REQUIRED)
# uncomment the following section in order to fill in
# further dependencies manually.
# find_package(<dependency> REQUIRED)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

add_executable(example_velocity src/example_velocity.cpp)
ament_target_dependencies(example_velocity
  rclcpp
  std_msgs
)


install(
  DIRECTORY
    launch
    config
    src
  DESTINATION
    share/${PROJECT_NAME}/
)

install(
  PROGRAMS
  launch/omnibot_platform_control.launch.py
  DESTINATION lib/${PROJECT_NAME}
)

install(
  TARGETS
    # example_position
    # example_position_pid
    example_velocity
    # example_effort
    # example_diff_drive
    # example_tricycle_drive
    # example_gripper
  DESTINATION
    lib/${PROJECT_NAME}
)

ament_package()
